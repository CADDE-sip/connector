"""
    Chain Data Lineage API

    CDLv2 API  # noqa: E501

    The version of the OpenAPI document: 2.1.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint as _Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.cdl_event import CDLEvent
from openapi_client.model.cdl_event_response import CDLEventResponse


class RegisterEventApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __eventwithhash(
            self,
            **kwargs
        ):
            """upload files and register an event at the same time  # noqa: E501

            calculate hash values and register an event - number of objects in datatags must be greater than or equal to the number of files included in this request. otherwise you will receive an error response - the api will only calculate sha256 value of the files but will not store them. it is your responsability to store them - the api will insert hash values to datatags[] elements in the same order as you include in the request. if there is cdlsha256hash attribute in the datatag object, it will be overwritten by the calculated hash value - if your request is like this:  ``` ------FormBoundaryFooBarBaz {   \"cdldatamodelversion\": \"2.0\",   \"cdleventtype:\":\"created files\",   \"cdldatatags\": [     {       \"whatever\" : \"foobar\"     },     {       \"cdluri\" : \"https://somewhere.else/file.txt\"     },     {       \"cdlsha256hash\": \"000000\"     }   ] } ------FormBoundaryFooBarBaz Content-Disposition: form-data; name=\"upfile\"; filename=\"a.txt\" Content-Type: text/plain  aaa ------FormBoundaryFooBarBaz Content-Disposition: form-data; name=\"upfile\"; filename=\"b.txt\" Content-Type: text/plain  bbb ------FormBoundaryFooBarBaz Content-Disposition: form-data; name=\"upfile\"; filename=\"c.txt\" Content-Type: text/plain  ccc ------FormBoundaryFooBarBaz  ``` a record will be created:   ``` {   \"cdldatamodelversion\": \"2.0\",   \"cdleventid\": \"39d210ea-a9ac-4a0b-96bb-072c3630f5e0\",   \"cdleventtype:\":\"created files\",   \"cdldatatags\": [     {       \"whatever\" : \"foobar\",       \"cdlsha256hash\": \"17e682f060b5f8e47ea04c5c4855908b0a5ad612022260fe50e11ecb0cc0ab76\"     },     {       \"cdluri\" : \"https://somewhere.else/file.txt\",       \"cdlsha256hash\": \"3cf9a1a81f6bdeaf08a343c1e1c73e89cf44c06ac2427a892382cae825e7c9c1\"     },     {       \"cdlsha256hash\": \"5695d82a086b677962a0b0428ed1a213208285b7b40d7d3604876d36a710302a\"     }   ] }  ``` and you will receive a response:  ``` {    \"cdleventid\": \"39d210ea-a9ac-4a0b-96bb-072c3630f5e0\" } ```   more about the event object:    json object describing an event to be recorded. the only mandatory attributes are the cdldatamodelversion and the cdleventtype. it is recommended to define a set of event types that are known to all participants. a request with least information will look like this:   ```   {     \"cdldatamodelversion\": \"2.0\",     \"cdleventtype\": \"some-common-event-name\"   }   ```      the cdleventid attribute, which identifies the event, will be assigned by the cdl system if you did not include it in the request.      it is possible to include the cdleventid attribute in your request, if you wish. in this case, you must choose a globally unique string for the value. the cdl system will check if there are no events with same cdleventid.   ```   {     \"cdldatamodelversion\": \"2.0\",     \"cdleventid\": \"an-id-no-one-else-would-ever-choose\",     \"cdleventtype\": \"some-common-event-name\"   }   ```   you can include an array of cdldatatags. each cdldatatag represents a data stored in location specified by cdldatatag.cdluri.   ```   {     \"cdldatamodelversion\": \"2.0\",     \"cdleventtype\": \"generated-a-file\",     \"cdldatatags\": [       {         \"cdluri\": \"http://example.com/path/ecaefa29-39af-459b-ab84-b3fa674584f6\",         \"cdlsha256hash\": \"b589b63bc6217ed0be9ed63b6a88984fc61e0732bbb5a7fb05a19c7b764b9c5b\",         \"cdlwebdavtimestamp\": \"2020-08-05T10:57:22+09:00\",         \"cdlsize\": 10003       }     ],   }   ``` you must include `content-type: multipart/form-data` line in the request header.   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.eventwithhash(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                request (CDLEvent): [optional]
                upfile ([file_type]): [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                CDLEventResponse
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.eventwithhash = _Endpoint(
            settings={
                'response_type': (CDLEventResponse,),
                'auth': [],
                'endpoint_path': '/eventwithhash',
                'operation_id': 'eventwithhash',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'request',
                    'upfile',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'request':
                        (CDLEvent,),
                    'upfile':
                        ([file_type],),
                },
                'attribute_map': {
                    'request': 'request',
                    'upfile': 'upfile',
                },
                'location_map': {
                    'request': 'form',
                    'upfile': 'form',
                },
                'collection_format_map': {
                    'upfile': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'multipart/form-data'
                ]
            },
            api_client=api_client,
            callable=__eventwithhash
        )
